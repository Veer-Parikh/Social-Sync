generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch","fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId                                          String          @id @default(uuid())
  email                                           String          @unique
  firstName                                       String?
  lastName                                        String?
  username                                        String          @unique
  password                                        String
  salt                                            String
  dob                                             DateTime
  createdAt                                       DateTime        @default(now())
  Comment                                         Comment[]
  CommentVote                                     CommentVote[]
  Stream                                          Stream[]
  StreamExit                                      StreamExit[]
  StreamPayment                                   StreamPayment[]
  StreamView                                      StreamView[]
  CreatorSubscribers Subscriptions[] @relation("Subscriptions_creatorUserIdToUser")
  UserSubscriptions    Subscriptions[] @relation("Subscriptions_userUserIdToUser")
  Vote                                            Vote[]
}

model Stream {
  streamId       String          @id @default(uuid())
  thumbnailUrl   String
  startTimestamp DateTime
  endTimestamp   DateTime
  storageUrl     String
  title          String
  description    String?
  createdAt      DateTime        @default(now())
  userUserId     String
  tags           String[]
  Comment        Comment[]
  creator        User            @relation(fields: [userUserId], references: [userId])
  StreamExit     StreamExit[]
  StreamPayment  StreamPayment[]
  StreamView     StreamView[]
  Subscriptions  Subscriptions[]
  Vote           Vote[]
}

model Vote {
  createdAt      DateTime @default(now())
  videoTimestamp DateTime
  streamStreamId String
  userUserId     String
  dislike        Boolean
  stream         Stream   @relation(fields: [streamStreamId], references: [streamId])
  user           User     @relation(fields: [userUserId], references: [userId])

  @@id([streamStreamId, userUserId])
}

model Comment {
  commentId      String        @id @default(uuid())
  content        String
  createdAt      DateTime      @default(now())
  videoTimestamp DateTime
  streamStreamId String
  userUserId     String
  stream         Stream        @relation(fields: [streamStreamId], references: [streamId])
  user           User          @relation(fields: [userUserId], references: [userId])
  CommentVote    CommentVote[]
}

model CommentVote {
  dislike          Boolean
  createdAt        DateTime @default(now())
  commentCommentId String
  userUserId       String
  comment          Comment  @relation(fields: [commentCommentId], references: [commentId])
  user             User     @relation(fields: [userUserId], references: [userId])

  @@id([commentCommentId, userUserId])
}

model StreamView {
  viewId    String   @id @default(uuid())
  streamId  String
  userId    String
  createdAt DateTime @default(now())
  Stream    Stream   @relation(fields: [streamId], references: [streamId])
  User      User     @relation(fields: [userId], references: [userId])
}

model StreamExit {
  streamExitId   String   @id @default(uuid())
  videoTimestamp DateTime
  createdAt      DateTime @default(now())
  streamStreamId String
  userUserId     String
  Stream         Stream   @relation(fields: [streamStreamId], references: [streamId])
  User           User     @relation(fields: [userUserId], references: [userId])
}

model StreamPayment {
  paymentId      String   @id @default(uuid())
  amount         Int
  createdAt      DateTime @default(now())
  userUserId     String
  streamStreamId String
  Stream         Stream   @relation(fields: [streamStreamId], references: [streamId])
  User           User     @relation(fields: [userUserId], references: [userId])
}

model Subscriptions {
  createdAt                              DateTime @default(now())
  userUserId                             String
  streamStreamId                         String?
  creatorUserId                          String
  User_Subscriptions_creatorUserIdToUser User     @relation("Subscriptions_creatorUserIdToUser", fields: [creatorUserId], references: [userId])
  Stream                                 Stream?  @relation(fields: [streamStreamId], references: [streamId])
  User_Subscriptions_userUserIdToUser    User     @relation("Subscriptions_userUserIdToUser", fields: [userUserId], references: [userId])

  @@id([userUserId, creatorUserId])
}
